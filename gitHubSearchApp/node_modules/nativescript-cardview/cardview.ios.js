var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var common = require("./cardview-common");
var color_1 = require("color");
var uiUtils = require("ui/utils");
var proxy_1 = require("ui/core/proxy");
var dependency_observable_1 = require("ui/core/dependency-observable");
global.moduleMerge(common, exports);
// var radiusProp = new Property(
//   "radius",
//   "CardView",
//   new PropertyMetadata(undefined, PropertyMetadataSettings.None)
// );
// var shadowOpacityProp = new Property(
//   "shadowOpacity",
//   "CardView",
//   new PropertyMetadata(undefined, PropertyMetadataSettings.None)
// );
// var shadowRadiusProp = new Property(
//   "shadowRadius",
//   "CardView",
//   new PropertyMetadata(undefined, PropertyMetadataSettings.None)
// );
var backgroundColorProp = new dependency_observable_1.Property("backgroundColor", "CardView", new proxy_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None));
var CardView = (function (_super) {
    __extends(CardView, _super);
    function CardView() {
        var _this = this;
        _super.call(this);
        // public radiusProp = radiusProp;
        // public shadowOpacityProp = shadowOpacityProp;
        // public shadowRadiusProp = shadowRadiusProp;
        this.backgroundColorProp = backgroundColorProp;
        this._ios = new MaterialCardView({
            x: 10,
            y: uiUtils.ios.getStatusBarHeight() + 10,
            w: UIApplication.sharedApplication().statusBarFrame.size.width - 20
        }, null);
        // console.log(`CardView constructor ------`);
        // console.log(this._ios);
        // XML props are set after construction
        // update appearance at next VM turn
        setTimeout(function () {
            _this.updateAppearance();
        });
    }
    Object.defineProperty(CardView.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardView.prototype, "_nativeView", {
        get: function () {
            return this._ios;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardView.prototype, "backgroundColor", {
        // get radius(): string {
        //   return this._getValue(this.radiusProp);
        // }
        // set radius(value: string) {
        //   this._setValue(this.radiusProp, value);
        // }
        // get shadowOpacity(): string {
        //   return this._getValue(this.shadowOpacityProp);
        // }
        // set shadowOpacity(value: string) {
        //   this._setValue(this.shadowOpacityProp, value);
        // }
        // get shadowRadius(): string {
        //   return this._getValue(this.shadowRadiusProp);
        // }
        // set shadowRadius(value: string) {
        //   this._setValue(this.shadowRadiusProp, value);
        // }
        get: function () {
            return this._getValue(this.backgroundColorProp);
        },
        set: function (value) {
            this._setValue(this.backgroundColorProp, value);
        },
        enumerable: true,
        configurable: true
    });
    CardView.prototype.updateAppearance = function () {
        // console.log('updateAppearance');
        // if (this.radius) {
        //   // console.log(`radius: ${this.radius}`);  
        //   this._ios.cardRadius = +this.radius;
        // }
        // if (this.shadowOpacity) {
        //   // console.log(`shadowOpacity: ${this.shadowOpacity}`);  
        //   this._ios.shadowOpacity = +this.shadowOpacity;
        // }
        // if (this.shadowRadius) {
        //   // console.log(`shadowRadius: ${this.shadowRadius}`);  
        //   this._ios.shadowRadius = +this.shadowRadius;
        // }
        if (this.backgroundColor) {
            // console.log(`backgroundColor: ${this.backgroundColor}`);  
            this._ios.backgroundColor = new color_1.Color(this.backgroundColor).ios;
        }
        this._ios.materialize();
    };
    return CardView;
})(common.CardView);
exports.CardView = CardView;
